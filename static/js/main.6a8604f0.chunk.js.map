{"version":3,"sources":["components/Main.module.css","video/background.mp4","images/logo.png","components/Main.jsx","components/Header/Header.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js","components/Header/Header.module.css","components/Footer/Footer.module.css"],"names":["module","exports","Main","className","styles","banner","autoPlay","loop","muted","video","src","require","type","banner_content","banner_title","banner_subtitle","Header","menu","wrapper","menu_logo","alt","menu_items","menu_item","to","Footer","footer_content","team","social_links","links_items","links_item","href","icon","faVk","faDiscord","faYoutube","faTelegram","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,OAAS,qBAAqB,MAAQ,oBAAoB,eAAiB,6BAA6B,aAAe,2BAA2B,gBAAkB,gC,mBCDtLD,EAAOC,QAAU,IAA0B,wC,iGCA3CD,EAAOC,QAAU,IAA0B,kC,yHCsB5BC,EAnBF,WACX,OACE,yBAAKC,UAAWC,IAAOC,QACrB,2BAAOC,UAAQ,EAACC,MAAI,EAACC,OAAK,EAACL,UAAWC,IAAOK,OAC3C,4BAAQC,IAAKC,EAAQ,IAA8BC,KAAK,cACxD,4BAAQF,IAAKC,EAAQ,IAA8BC,KAAK,eAE1D,yBAAKT,UAAWC,IAAOS,gBACrB,yBAAKV,UAAWC,IAAOU,cACrB,oMAEF,yBAAKX,UAAWC,IAAOW,iBACrB,0D,gBCeKC,EAzBA,WACb,OACE,yBAAKb,UAAWC,IAAOa,MACrB,yBAAKd,UAAWC,IAAOc,SACrB,yBAAKf,UAAWC,IAAOe,WACrB,yBAAKT,IAAKC,EAAQ,IAA4BS,IAAI,UAEpD,wBAAIjB,UAAWC,IAAOiB,YACpB,wBAAIlB,UAAWC,IAAOkB,WACpB,kBAAC,IAAD,CAASC,GAAG,gBAAZ,2DAEF,wBAAIpB,UAAWC,IAAOkB,WACpB,kBAAC,IAAD,CAASC,GAAG,iBAAZ,uEAEF,wBAAIpB,UAAWC,IAAOkB,WAAtB,gCACA,wBAAInB,UAAWC,IAAOkB,WAAtB,mCACA,wBAAInB,UAAWC,IAAOkB,WACpB,kBAAC,IAAD,CAASC,GAAG,SAAZ,qE,gCCwBGC,EApCA,WACb,OACE,gCACE,yBAAKrB,UAAWC,IAAOc,SACrB,yBAAKf,UAAWC,IAAOqB,gBACrB,yBAAKtB,UAAWC,IAAOsB,MAAvB,wBACA,yBAAKvB,UAAWC,IAAOuB,cACrB,wBAAIxB,UAAWC,IAAOwB,aACpB,wBAAIzB,UAAWC,IAAOyB,YACpB,uBAAGC,KAAK,KACN,kBAAC,IAAD,CAAiBC,KAAMC,QAG3B,wBAAI7B,UAAWC,IAAOyB,YACpB,uBAAGC,KAAK,KACN,kBAAC,IAAD,CAAiBC,KAAME,QAG3B,wBAAI9B,UAAWC,IAAOyB,YACpB,uBAAGC,KAAK,KACN,kBAAC,IAAD,CAAiBC,KAAMG,QAG3B,wBAAI/B,UAAWC,IAAOyB,YACpB,uBAAGC,KAAK,KACN,kBAAC,IAAD,CAAiBC,KAAMI,cCf1BC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKjC,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BzD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,QAAU,wBAAwB,UAAY,0BAA0B,WAAa,2BAA2B,UAAY,4B,kBCA1KD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,eAAiB,+BAA+B,KAAO,qBAAqB,YAAc,+B","file":"static/js/main.6a8604f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"Main_banner__6SIzK\",\"video\":\"Main_video__13Bt-\",\"banner_content\":\"Main_banner_content__d5CGv\",\"banner_title\":\"Main_banner_title__Hiwzp\",\"banner_subtitle\":\"Main_banner_subtitle__389xM\"};","module.exports = __webpack_public_path__ + \"static/media/background.28237aca.mp4\";","module.exports = __webpack_public_path__ + \"static/media/logo.cc549709.png\";","import React from \"react\";\nimport styles from \"./Main.module.css\";\n\nconst Main = () => {\n  return (\n    <div className={styles.banner}>\n      <video autoPlay loop muted className={styles.video}>\n        <source src={require(\"./../video/background.mp4\")} type=\"video/mp4\" />\n        <source src={require(\"./../video/background.mp4\")} type=\"video/ogg\" />\n      </video>\n      <div className={styles.banner_content}>\n        <div className={styles.banner_title}>\n          <p>Официциальный сайт чемпионата</p>\n        </div>\n        <div className={styles.banner_subtitle}>\n          <p>bad school drift series</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from \"./Header.module.css\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nconst Header = () => {\n  return (\n    <nav className={styles.menu}>\n      <div className={styles.wrapper}>\n        <div className={styles.menu_logo}>\n          <img src={require(\"./../../images/logo.png\")} alt=\"logo\" />\n        </div>\n        <ul className={styles.menu_items}>\n          <li className={styles.menu_item}>\n            <NavLink to=\"/regulations\">Регламент</NavLink>\n          </li>\n          <li className={styles.menu_item}>\n            <NavLink to=\"/registration\">Регистрация</NavLink>\n          </li>\n          <li className={styles.menu_item}>PRO лига</li>\n          <li className={styles.menu_item}>JUNIOR лига</li>\n          <li className={styles.menu_item}>\n            <NavLink to=\"/live\">Трансляция</NavLink>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport styles from \"./Footer.module.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faDiscord,\n  faVk,\n  faYoutube,\n  faTelegram,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <div className={styles.wrapper}>\n        <div className={styles.footer_content}>\n          <div className={styles.team}>bad shool drift team</div>\n          <div className={styles.social_links}>\n            <ul className={styles.links_items}>\n              <li className={styles.links_item}>\n                <a href=\"#\">\n                  <FontAwesomeIcon icon={faVk} />\n                </a>\n              </li>\n              <li className={styles.links_item}>\n                <a href=\"#\">\n                  <FontAwesomeIcon icon={faDiscord} />\n                </a>\n              </li>\n              <li className={styles.links_item}>\n                <a href=\"#\">\n                  <FontAwesomeIcon icon={faYoutube} />\n                </a>\n              </li>\n              <li className={styles.links_item}>\n                <a href=\"#\">\n                  <FontAwesomeIcon icon={faTelegram} />\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Main from \"./components/Main\"\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"app-wrapper\">\n        <Header />\n        <Route exact path=\"/\" render={() => <Main />} />\n        <Footer />\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Header_menu__BQHSW\",\"wrapper\":\"Header_wrapper__4Axjt\",\"menu_logo\":\"Header_menu_logo__3hki9\",\"menu_items\":\"Header_menu_items__2sFYj\",\"menu_item\":\"Header_menu_item__2Qu0F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Footer_wrapper__1UzXs\",\"footer_content\":\"Footer_footer_content__JELaP\",\"team\":\"Footer_team__26E36\",\"links_items\":\"Footer_links_items__2DVhO\"};"],"sourceRoot":""}